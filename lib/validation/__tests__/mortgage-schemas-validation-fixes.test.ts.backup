// ABOUTME: Test suite for progressive form input validation fixes (Plan 2025-10-19)
// ABOUTME: Tests critical validation issues - negative values, age range, decimal ages, liability validation

import {
  createGateSchema
} from '../mortgage-schemas'

describe('Input Validation - Critical Issues (Plan 2025-10-19)', () => {
  describe('Income Field Validation', () => {
    test('should reject negative income in actualIncomes', () => {
      const gate3Schema = createGateSchema('new_purchase', 3)
      const invalidData = {
        loanType: 'new_purchase' as const,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '91234567',
        propertyCategory: 'resale' as const,
        propertyType: 'HDB' as const,
        priceRange: 500000,
        combinedAge: 35,
        actualIncomes: { '0': -5000 },
        actualAges: { '0': 35 },
        employmentType: 'employed' as const
      }
      const result = gate3Schema.safeParse(invalidData)
      expect(result.success).toBe(false)
      if (!result.success) {
        expect(result.error.issues[0].message).toContain('cannot be negative')
      }
    

    test('should accept valid positive income values', () => {
      const gate3Schema = createGateSchema('new_purchase', 3)
      const validData = {
        loanType: 'new_purchase' as const,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '91234567',
        propertyCategory: 'resale' as const,
        propertyType: 'HDB' as const,
        priceRange: 500000,
        combinedAge: 35,
        actualIncomes: { '0': 8000 },
        actualAges: { '0': 35 },
        employmentType: 'employed' as const
      }
      const result = gate3Schema.safeParse(validData)
      expect(result.success).toBe(true)
    
  

  describe('Age Field Validation', () => {
    test('should reject age below 18', () => {
      const gate3Schema = createGateSchema('new_purchase', 3)
      const invalidData = {
        loanType: 'new_purchase' as const,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '91234567',
        propertyCategory: 'resale' as const,
        propertyType: 'HDB' as const,
        priceRange: 500000,
        combinedAge: 35,
        actualIncomes: { '0': 5000 },
        actualAges: { '0': 15 },
        employmentType: 'employed' as const
      }
      const result = gate3Schema.safeParse(invalidData)
      expect(result.success).toBe(false)
      if (!result.success) {
        expect(result.error.issues[0].message).toContain('at least 18')
      }
    

    test('should reject age above 99', () => {
      const gate3Schema = createGateSchema('new_purchase', 3)
      const invalidData = {
        loanType: 'new_purchase' as const,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '91234567',
        propertyCategory: 'resale' as const,
        propertyType: 'HDB' as const,
        priceRange: 500000,
        combinedAge: 35,
        actualIncomes: { '0': 5000 },
        actualAges: { '0': 150 },
        employmentType: 'employed' as const
      }
      const result = gate3Schema.safeParse(invalidData)
      expect(result.success).toBe(false)
    

    test('should reject decimal ages', () => {
      const gate3Schema = createGateSchema('new_purchase', 3)
      const invalidData = {
        loanType: 'new_purchase' as const,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '91234567',
        propertyCategory: 'resale' as const,
        propertyType: 'HDB' as const,
        priceRange: 500000,
        combinedAge: 35,
        actualIncomes: { '0': 5000 },
        actualAges: { '0': 35.5 },
        employmentType: 'employed' as const
      }
      const result = gate3Schema.safeParse(invalidData)
      expect(result.success).toBe(false)
    })

    test('should accept valid age in range 18-99', () => {
      const gate3Schema = createGateSchema('new_purchase', 3)
      const validData = {
        loanType: 'new_purchase' as const,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '91234567',
        propertyCategory: 'resale' as const,
        propertyType: 'HDB' as const,
        priceRange: 500000,
        combinedAge: 35,
        actualIncomes: { '0': 5000 },
        actualAges: { '0': 35 },
        employmentType: 'employed' as const
      }
      const result = gate3Schema.safeParse(validData)
      expect(result.success).toBe(true)
    })
  })
})

  describe('Variable Income Validation', () => {
    test('should reject negative variable income in actualVariableIncomes', () => {
      const gate3Schema = createGateSchema('new_purchase', 3)
      const invalidData = {
        loanType: 'new_purchase' as const,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '91234567',
        propertyCategory: 'resale' as const,
        propertyType: 'HDB' as const,
        priceRange: 500000,
        combinedAge: 35,
        actualIncomes: { '0': 5000 },
        actualAges: { '0': 35 },
        employmentType: 'variable' as const,
        actualVariableIncomes: { '0': -2000 }
      }
      const result = gate3Schema.safeParse(invalidData)
      expect(result.success).toBe(false)
      if (!result.success) {
        expect(result.error.issues[0].message).toContain('cannot be negative')
      }
    })

    test('should reject negative second variable income', () => {
      const gate3Schema = createGateSchema('new_purchase', 3)
      const invalidData = {
        loanType: 'new_purchase' as const,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '91234567',
        propertyCategory: 'resale' as const,
        propertyType: 'HDB' as const,
        priceRange: 500000,
        combinedAge: 35,
        actualIncomes: { '0': 5000, '1': 4000 },
        actualAges: { '0': 35, '1': 33 },
        employmentType: 'variable' as const,
        actualVariableIncomes: { '0': 2000, '1': -1500 },
        hasJointApplicant: true
      }
      const result = gate3Schema.safeParse(invalidData)
      expect(result.success).toBe(false)
      if (!result.success) {
        expect(result.error.issues[0].message).toContain('cannot be negative')
      }
    })

    test('should accept valid positive variable income values', () => {
      const gate3Schema = createGateSchema('new_purchase', 3)
      const validData = {
        loanType: 'new_purchase' as const,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '91234567',
        propertyCategory: 'resale' as const,
        propertyType: 'HDB' as const,
        priceRange: 500000,
        combinedAge: 35,
        actualIncomes: { '0': 5000 },
        actualAges: { '0': 35 },
        employmentType: 'variable' as const,
        actualVariableIncomes: { '0': 3000 }
      }
      const result = gate3Schema.safeParse(validData)
      expect(result.success).toBe(true)
    })

    test('should accept zero as valid variable income', () => {
      const gate3Schema = createGateSchema('new_purchase', 3)
      const validData = {
        loanType: 'new_purchase' as const,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '91234567',
        propertyCategory: 'resale' as const,
        propertyType: 'HDB' as const,
        priceRange: 500000,
        combinedAge: 35,
        actualIncomes: { '0': 5000 },
        actualAges: { '0': 35 },
        employmentType: 'variable' as const,
        actualVariableIncomes: { '0': 0 }
      }
      const result = gate3Schema.safeParse(validData)
      expect(result.success).toBe(true)
    })
  })

})

  describe('Liability Balance Validation', () => {
    test('should reject negative property loan outstanding balance', () => {
      const gate3Schema = createGateSchema('new_purchase', 3)
      const invalidData = {
        loanType: 'new_purchase' as const,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '91234567',
        propertyCategory: 'resale' as const,
        propertyType: 'HDB' as const,
        priceRange: 500000,
        combinedAge: 35,
        actualIncomes: { '0': 5000 },
        actualAges: { '0': 35 },
        employmentType: 'employed' as const,
        liabilities: {
          propertyLoans: { enabled: true, outstandingBalance: -100000, monthlyPayment: 800 }
        }
      }
      const result = gate3Schema.safeParse(invalidData)
      expect(result.success).toBe(false)
      if (!result.success) {
        expect(result.error.issues[0].message).toContain('cannot be negative')
      }
    })

    test('should reject negative car loan outstanding balance', () => {
      const gate3Schema = createGateSchema('new_purchase', 3)
      const invalidData = {
        loanType: 'new_purchase' as const,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '91234567',
        propertyCategory: 'resale' as const,
        propertyType: 'HDB' as const,
        priceRange: 500000,
        combinedAge: 35,
        actualIncomes: { '0': 5000 },
        actualAges: { '0': 35 },
        employmentType: 'employed' as const,
        liabilities: {
          carLoans: { enabled: true, outstandingBalance: -50000, monthlyPayment: 600 }
        }
      }
      const result = gate3Schema.safeParse(invalidData)
      expect(result.success).toBe(false)
      if (!result.success) {
        expect(result.error.issues[0].message).toContain('cannot be negative')
      }
    })

    test('should reject negative credit card outstanding balance', () => {
      const gate3Schema = createGateSchema('new_purchase', 3)
      const invalidData = {
        loanType: 'new_purchase' as const,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '91234567',
        propertyCategory: 'resale' as const,
        propertyType: 'HDB' as const,
        priceRange: 500000,
        combinedAge: 35,
        actualIncomes: { '0': 5000 },
        actualAges: { '0': 35 },
        employmentType: 'employed' as const,
        liabilities: {
          creditCards: { enabled: true, outstandingBalance: -8000, monthlyPayment: 240 }
        }
      }
      const result = gate3Schema.safeParse(invalidData)
      expect(result.success).toBe(false)
      if (!result.success) {
        expect(result.error.issues[0].message).toContain('cannot be negative')
      }
    })

    test('should reject negative personal line outstanding balance', () => {
      const gate3Schema = createGateSchema('new_purchase', 3)
      const invalidData = {
        loanType: 'new_purchase' as const,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '91234567',
        propertyCategory: 'resale' as const,
        propertyType: 'HDB' as const,
        priceRange: 500000,
        combinedAge: 35,
        actualIncomes: { '0': 5000 },
        actualAges: { '0': 35 },
        employmentType: 'employed' as const,
        liabilities: {
          personalLines: { enabled: true, outstandingBalance: -20000, monthlyPayment: 300 }
        }
      }
      const result = gate3Schema.safeParse(invalidData)
      expect(result.success).toBe(false)
      if (!result.success) {
        expect(result.error.issues[0].message).toContain('cannot be negative')
      }
    })

    test('should accept valid positive liability balances', () => {
      const gate3Schema = createGateSchema('new_purchase', 3)
      const validData = {
        loanType: 'new_purchase' as const,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '91234567',
        propertyCategory: 'resale' as const,
        propertyType: 'HDB' as const,
        priceRange: 500000,
        combinedAge: 35,
        actualIncomes: { '0': 5000 },
        actualAges: { '0': 35 },
        employmentType: 'employed' as const,
        liabilities: {
          propertyLoans: { enabled: true, outstandingBalance: 200000, monthlyPayment: 800 },
          carLoans: { enabled: true, outstandingBalance: 50000, monthlyPayment: 600 },
          creditCards: { enabled: true, outstandingBalance: 8000, monthlyPayment: 240 }
        }
      }
      const result = gate3Schema.safeParse(validData)
      expect(result.success).toBe(true)
    })

    test('should accept zero as valid liability balance', () => {
      const gate3Schema = createGateSchema('new_purchase', 3)
      const validData = {
        loanType: 'new_purchase' as const,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '91234567',
        propertyCategory: 'resale' as const,
        propertyType: 'HDB' as const,
        priceRange: 500000,
        combinedAge: 35,
        actualIncomes: { '0': 5000 },
        actualAges: { '0': 35 },
        employmentType: 'employed' as const,
        liabilities: {
          propertyLoans: { enabled: true, outstandingBalance: 0, monthlyPayment: 0 }
        }
      }
      const result = gate3Schema.safeParse(validData)
      expect(result.success).toBe(true)
    })
  })

})

  describe('Liability Monthly Payment Validation', () => {
    test('should reject negative property loan monthly payment', () => {
      const gate3Schema = createGateSchema('new_purchase', 3)
      const invalidData = {
        loanType: 'new_purchase' as const,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '91234567',
        propertyCategory: 'resale' as const,
        propertyType: 'HDB' as const,
        priceRange: 500000,
        combinedAge: 35,
        actualIncomes: { '0': 5000 },
        actualAges: { '0': 35 },
        employmentType: 'employed' as const,
        liabilities: {
          propertyLoans: { enabled: true, outstandingBalance: 200000, monthlyPayment: -800 }
        }
      }
      const result = gate3Schema.safeParse(invalidData)
      expect(result.success).toBe(false)
      if (!result.success) {
        expect(result.error.issues[0].message).toContain('cannot be negative')
      }
    })

    test('should reject negative car loan monthly payment', () => {
      const gate3Schema = createGateSchema('new_purchase', 3)
      const invalidData = {
        loanType: 'new_purchase' as const,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '91234567',
        propertyCategory: 'resale' as const,
        propertyType: 'HDB' as const,
        priceRange: 500000,
        combinedAge: 35,
        actualIncomes: { '0': 5000 },
        actualAges: { '0': 35 },
        employmentType: 'employed' as const,
        liabilities: {
          carLoans: { enabled: true, outstandingBalance: 50000, monthlyPayment: -600 }
        }
      }
      const result = gate3Schema.safeParse(invalidData)
      expect(result.success).toBe(false)
      if (!result.success) {
        expect(result.error.issues[0].message).toContain('cannot be negative')
      }
    })

    test('should reject negative credit card monthly payment', () => {
      const gate3Schema = createGateSchema('new_purchase', 3)
      const invalidData = {
        loanType: 'new_purchase' as const,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '91234567',
        propertyCategory: 'resale' as const,
        propertyType: 'HDB' as const,
        priceRange: 500000,
        combinedAge: 35,
        actualIncomes: { '0': 5000 },
        actualAges: { '0': 35 },
        employmentType: 'employed' as const,
        liabilities: {
          creditCards: { enabled: true, outstandingBalance: 8000, monthlyPayment: -240 }
        }
      }
      const result = gate3Schema.safeParse(invalidData)
      expect(result.success).toBe(false)
      if (!result.success) {
        expect(result.error.issues[0].message).toContain('cannot be negative')
      }
    })

    test('should reject negative personal line monthly payment', () => {
      const gate3Schema = createGateSchema('new_purchase', 3)
      const invalidData = {
        loanType: 'new_purchase' as const,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '91234567',
        propertyCategory: 'resale' as const,
        propertyType: 'HDB' as const,
        priceRange: 500000,
        combinedAge: 35,
        actualIncomes: { '0': 5000 },
        actualAges: { '0': 35 },
        employmentType: 'employed' as const,
        liabilities: {
          personalLines: { enabled: true, outstandingBalance: 20000, monthlyPayment: -300 }
        }
      }
      const result = gate3Schema.safeParse(invalidData)
      expect(result.success).toBe(false)
      if (!result.success) {
        expect(result.error.issues[0].message).toContain('cannot be negative')
      }
    })

    test('should accept valid positive monthly payments', () => {
      const gate3Schema = createGateSchema('new_purchase', 3)
      const validData = {
        loanType: 'new_purchase' as const,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '91234567',
        propertyCategory: 'resale' as const,
        propertyType: 'HDB' as const,
        priceRange: 500000,
        combinedAge: 35,
        actualIncomes: { '0': 5000 },
        actualAges: { '0': 35 },
        employmentType: 'employed' as const,
        liabilities: {
          propertyLoans: { enabled: true, outstandingBalance: 200000, monthlyPayment: 800 },
          carLoans: { enabled: true, outstandingBalance: 50000, monthlyPayment: 600 },
          creditCards: { enabled: true, outstandingBalance: 8000, monthlyPayment: 240 }
        }
      }
      const result = gate3Schema.safeParse(validData)
      expect(result.success).toBe(true)
    })

    test('should accept zero as valid monthly payment', () => {
      const gate3Schema = createGateSchema('new_purchase', 3)
      const validData = {
        loanType: 'new_purchase' as const,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '91234567',
        propertyCategory: 'resale' as const,
        propertyType: 'HDB' as const,
        priceRange: 500000,
        combinedAge: 35,
        actualIncomes: { '0': 5000 },
        actualAges: { '0': 35 },
        employmentType: 'employed' as const,
        liabilities: {
          propertyLoans: { enabled: true, outstandingBalance: 0, monthlyPayment: 0 }
        }
      }
      const result = gate3Schema.safeParse(validData)
      expect(result.success).toBe(true)
    })
  })

})

  describe('Business Age Validation (Self-Employed)', () => {
    test('should reject negative business age', () => {
      const gate3Schema = createGateSchema('new_purchase', 3)
      const invalidData = {
        loanType: 'new_purchase' as const,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '91234567',
        propertyCategory: 'resale' as const,
        propertyType: 'HDB' as const,
        priceRange: 500000,
        combinedAge: 35,
        actualIncomes: { '0': 5000 },
        actualAges: { '0': 35 },
        employmentType: 'self-employed' as const,
        employmentDetails: {
          'self-employed': {
            businessAgeYears: -2,
            noaSubmitted: true,
            averageReportedIncome: 60000
          },
          variable: {
            averagePastTwelveMonths: '',
            lowestObservedIncome: ''
          }
        }
      }
      const result = gate3Schema.safeParse(invalidData)
      expect(result.success).toBe(false)
      if (!result.success) {
        expect(result.error.issues[0].message).toContain('cannot be negative')
      }
    })

    test('should reject decimal business age', () => {
      const gate3Schema = createGateSchema('new_purchase', 3)
      const invalidData = {
        loanType: 'new_purchase' as const,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '91234567',
        propertyCategory: 'resale' as const,
        propertyType: 'HDB' as const,
        priceRange: 500000,
        combinedAge: 35,
        actualIncomes: { '0': 5000 },
        actualAges: { '0': 35 },
        employmentType: 'self-employed' as const,
        employmentDetails: {
          'self-employed': {
            businessAgeYears: 5.5,
            noaSubmitted: true,
            averageReportedIncome: 60000
          },
          variable: {
            averagePastTwelveMonths: '',
            lowestObservedIncome: ''
          }
        }
      }
      const result = gate3Schema.safeParse(invalidData)
      expect(result.success).toBe(false)
      if (!result.success) {
        expect(result.error.issues[0].message).toContain('whole number')
      }
    })

    test('should reject business age above maximum', () => {
      const gate3Schema = createGateSchema('new_purchase', 3)
      const invalidData = {
        loanType: 'new_purchase' as const,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '91234567',
        propertyCategory: 'resale' as const,
        propertyType: 'HDB' as const,
        priceRange: 500000,
        combinedAge: 35,
        actualIncomes: { '0': 5000 },
        actualAges: { '0': 35 },
        employmentType: 'self-employed' as const,
        employmentDetails: {
          'self-employed': {
            businessAgeYears: 150,
            noaSubmitted: true,
            averageReportedIncome: 60000
          },
          variable: {
            averagePastTwelveMonths: '',
            lowestObservedIncome: ''
          }
        }
      }
      const result = gate3Schema.safeParse(invalidData)
      expect(result.success).toBe(false)
    })

    test('should accept valid business age', () => {
      const gate3Schema = createGateSchema('new_purchase', 3)
      const validData = {
        loanType: 'new_purchase' as const,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '91234567',
        propertyCategory: 'resale' as const,
        propertyType: 'HDB' as const,
        priceRange: 500000,
        combinedAge: 35,
        actualIncomes: { '0': 5000 },
        actualAges: { '0': 35 },
        employmentType: 'self-employed' as const,
        employmentDetails: {
          'self-employed': {
            businessAgeYears: 5,
            noaSubmitted: true,
            averageReportedIncome: 60000
          },
          variable: {
            averagePastTwelveMonths: '',
            lowestObservedIncome: ''
          }
        }
      }
      const result = gate3Schema.safeParse(validData)
      expect(result.success).toBe(true)
    })

    test('should accept zero as valid business age (new business)', () => {
      const gate3Schema = createGateSchema('new_purchase', 3)
      const validData = {
        loanType: 'new_purchase' as const,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '91234567',
        propertyCategory: 'resale' as const,
        propertyType: 'HDB' as const,
        priceRange: 500000,
        combinedAge: 35,
        actualIncomes: { '0': 5000 },
        actualAges: { '0': 35 },
        employmentType: 'self-employed' as const,
        employmentDetails: {
          'self-employed': {
            businessAgeYears: 0,
            noaSubmitted: false,
            averageReportedIncome: 60000
          },
          variable: {
            averagePastTwelveMonths: '',
            lowestObservedIncome: ''
          }
        }
      }
      const result = gate3Schema.safeParse(validData)
      expect(result.success).toBe(true)
    })
  })

})

  describe('Joint Applicant Age Validation', () => {
    test('should reject negative age for second applicant', () => {
      const gate3Schema = createGateSchema('new_purchase', 3)
      const invalidData = {
        loanType: 'new_purchase' as const,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '91234567',
        propertyCategory: 'resale' as const,
        propertyType: 'HDB' as const,
        priceRange: 500000,
        combinedAge: 35,
        actualIncomes: { '0': 5000, '1': 4000 },
        actualAges: { '0': 35, '1': -30 },
        employmentType: 'employed' as const,
        hasJointApplicant: true
      }
      const result = gate3Schema.safeParse(invalidData)
      expect(result.success).toBe(false)
    })

    test('should reject age below 18 for second applicant', () => {
      const gate3Schema = createGateSchema('new_purchase', 3)
      const invalidData = {
        loanType: 'new_purchase' as const,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '91234567',
        propertyCategory: 'resale' as const,
        propertyType: 'HDB' as const,
        priceRange: 500000,
        combinedAge: 35,
        actualIncomes: { '0': 5000, '1': 4000 },
        actualAges: { '0': 35, '1': 16 },
        employmentType: 'employed' as const,
        hasJointApplicant: true
      }
      const result = gate3Schema.safeParse(invalidData)
      expect(result.success).toBe(false)
      if (!result.success) {
        expect(result.error.issues[0].message).toContain('at least 18')
      }
    })

    test('should reject age above 99 for second applicant', () => {
      const gate3Schema = createGateSchema('new_purchase', 3)
      const invalidData = {
        loanType: 'new_purchase' as const,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '91234567',
        propertyCategory: 'resale' as const,
        propertyType: 'HDB' as const,
        priceRange: 500000,
        combinedAge: 35,
        actualIncomes: { '0': 5000, '1': 4000 },
        actualAges: { '0': 35, '1': 105 },
        employmentType: 'employed' as const,
        hasJointApplicant: true
      }
      const result = gate3Schema.safeParse(invalidData)
      expect(result.success).toBe(false)
    })

    test('should reject decimal age for second applicant', () => {
      const gate3Schema = createGateSchema('new_purchase', 3)
      const invalidData = {
        loanType: 'new_purchase' as const,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '91234567',
        propertyCategory: 'resale' as const,
        propertyType: 'HDB' as const,
        priceRange: 500000,
        combinedAge: 35,
        actualIncomes: { '0': 5000, '1': 4000 },
        actualAges: { '0': 35, '1': 33.5 },
        employmentType: 'employed' as const,
        hasJointApplicant: true
      }
      const result = gate3Schema.safeParse(invalidData)
      expect(result.success).toBe(false)
    })

    test('should accept valid ages for both applicants', () => {
      const gate3Schema = createGateSchema('new_purchase', 3)
      const validData = {
        loanType: 'new_purchase' as const,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '91234567',
        propertyCategory: 'resale' as const,
        propertyType: 'HDB' as const,
        priceRange: 500000,
        combinedAge: 35,
        actualIncomes: { '0': 5000, '1': 4000 },
        actualAges: { '0': 35, '1': 33 },
        employmentType: 'employed' as const,
        hasJointApplicant: true
      }
      const result = gate3Schema.safeParse(validData)
      expect(result.success).toBe(true)
    })

    test('should reject negative income for second applicant', () => {
      const gate3Schema = createGateSchema('new_purchase', 3)
      const invalidData = {
        loanType: 'new_purchase' as const,
        name: 'John Doe',
        email: 'john@example.com',
        phone: '91234567',
        propertyCategory: 'resale' as const,
        propertyType: 'HDB' as const,
        priceRange: 500000,
        combinedAge: 35,
        actualIncomes: { '0': 5000, '1': -4000 },
        actualAges: { '0': 35, '1': 33 },
        employmentType: 'employed' as const,
        hasJointApplicant: true
      }
      const result = gate3Schema.safeParse(invalidData)
      expect(result.success).toBe(false)
      if (!result.success) {
        expect(result.error.issues[0].message).toContain('cannot be negative')
      }
    })
  })

})
