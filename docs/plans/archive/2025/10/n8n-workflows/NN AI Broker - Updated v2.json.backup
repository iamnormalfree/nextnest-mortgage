{
  "name": "NN AI Broker",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "chatwoot-ai-broker",
        "options": {}
      },
      "id": "fe628289-fe6d-4a18-89c2-87af0d0821ad",
      "name": "Chatwoot Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -1392,
        112
      ],
      "webhookId": "chatwoot-ai-broker"
    },
    {
      "parameters": {
        "jsCode": "// Merge broker data from either path\n  const inputs = $input.all();\n\n  // Get customer profile from the Extract Customer Profile node\n  const customerProfile = $('Extract Customer Profile').first().json;\n\n  // Initialize broker data\n  let brokerData = null;\n\n  // Get the direct input to this node\n  const directInput = $input.first().json;\n\n  // Handle both array and object inputs\n  const data = Array.isArray(directInput) ? directInput[0] : directInput;\n\n  if (data) {\n    // Path 1: FALSE branch - Coming from \"Get Broker Details\" (has full broker data)\n    if (data.personality_type && data.voice_model) {\n      brokerData = {\n        id: data.id,\n        name: data.name,\n        slug: data.slug,\n        photoUrl: data.photo_url,\n        personalityType: data.personality_type,\n        voiceDescription: data.voice_description,\n        communicationStyle: data.communication_style,\n        approachStyle: data.approach_style,\n        favoritePhrases: data.favorite_phrases || [],\n        speakingSpeed: data.speaking_speed,\n        voiceModel: data.voice_model\n      };\n    }\n    // Path 2: TRUE branch - Coming from \"Create Assignment Record\" (only has broker_id)\n    else if (data.broker_id && data.assignment_method) {\n      console.log('Detected assignment record, fetching broker details from Assign Best Broker node');\n\n      // We need to get broker details from the \"Assign Best Broker\" node\n      try {\n        // Try different ways to access the node\n        const assignBrokerData = $('Assign Best Broker').first().json;\n        console.log('Assign Best Broker data:', assignBrokerData);\n\n        // Handle both array and object\n        const broker = Array.isArray(assignBrokerData) ? assignBrokerData[0] : assignBrokerData;\n\n        if (broker && broker.id) {\n          brokerData = {\n            id: broker.id,\n            name: broker.name,\n            slug: broker.slug,\n            photoUrl: broker.photo_url,\n            personalityType: broker.personality_type,\n            voiceDescription: broker.voice_description,\n            communicationStyle: broker.communication_style,\n            approachStyle: broker.approach_style,\n            favoritePhrases: broker.favorite_phrases || [],\n            speakingSpeed: broker.speaking_speed,\n            voiceModel: broker.voice_model\n          };\n          console.log('Successfully extracted broker data:', brokerData.name);\n        }\n      } catch (e) {\n        console.log('Error getting Assign Best Broker data:', e.message);\n\n        // Try alternative node access methods\n        try {\n          // Get all items from workflow\n          const allItems = $items();\n          console.log('Total items in workflow:', allItems.length);\n\n          // Look for broker data in all items\n          for (const item of allItems) {\n            if (item.json && item.json.personality_type) {\n              console.log('Found broker data in items');\n              brokerData = {\n                id: item.json.id,\n                name: item.json.name,\n                slug: item.json.slug,\n                photoUrl: item.json.photo_url,\n                personalityType: item.json.personality_type,\n                voiceDescription: item.json.voice_description,\n                communicationStyle: item.json.communication_style,\n                approachStyle: item.json.approach_style,\n                favoritePhrases: item.json.favorite_phrases || [],\n                speakingSpeed: item.json.speaking_speed,\n                voiceModel: item.json.voice_model\n              };\n              break;\n            }\n          }\n        } catch (e2) {\n          console.log('Alternative method also failed:', e2.message);\n        }\n      }\n    }\n  }\n\n  // Debug logging\n  console.log('Broker data found:', brokerData ? brokerData.name : 'null');\n\n  // Return merged context\n  return {\n    broker: brokerData,\n    customer: customerProfile,\n    conversationId: customerProfile?.conversationId,\n    messageCount: customerProfile?.messageCount || 0\n  };"
      },
      "id": "aaff502c-bde3-4af7-97fb-fac37eab8189",
      "name": "Merge Broker Context",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        400,
        80
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n    const conversationData = $input.first().json;\n    const brokerContext = $('Merge Broker Context').first().json;\n\n    const messages = conversationData.messages || [];\n\n    // Build conversation history\n    const conversationHistory = [];\n    for (let i = 0; i < Math.min(10, messages.length); i++) {\n      const msg = messages[messages.length - 1 - i];\n      if (!msg.private) {\n        let role = 'system';\n        if (msg.message_type === 0) {\n          role = 'user';\n        } else if (msg.message_type === 1) {\n          role = 'assistant';\n        }\n        conversationHistory.unshift({\n          role: role,\n          content: msg.content\n        });\n      }\n    }\n\n    // Identify topics\n    const topicsDiscussed = [];\n    const messageTexts = messages.map(m => String(m.content || '').toLowerCase()).join(' ');\n\n    if (messageTexts.indexOf('rate') !== -1) topicsDiscussed.push('interest rates');\n    if (messageTexts.indexOf('afford') !== -1) topicsDiscussed.push('affordability');\n    if (messageTexts.indexOf('cpf') !== -1) topicsDiscussed.push('CPF usage');\n    if (messageTexts.indexOf('loan') !== -1) topicsDiscussed.push('loan details');\n    if (messageTexts.indexOf('refinanc') !== -1) topicsDiscussed.push('refinancing');\n\n    // Use the actual current message from customer\n    const currentMsg = brokerContext.customer?.currentMessage || 'I need help with my mortgage';\n\n    return {\n      broker: brokerContext.broker || null,\n      customer: brokerContext.customer || null,\n      conversationHistory: conversationHistory,\n      topicsDiscussed: topicsDiscussed,\n      totalMessages: messages.length,\n      currentMessage: currentMsg\n    };\n\n  } catch (error) {\n    return {\n      error: error.message,\n      stack: error.stack\n    };\n  }"
      },
      "id": "c7d572ef-13e2-4dec-b7dc-c3cdf623a34b",
      "name": "Process History",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        800,
        80
      ]
    },
    {
      "parameters": {
        "jsCode": "// Get inputs\n  const aiData = $input.first().json;\n  const processHistory = $('Process History').first().json;\n\n  // Extract AI response based on structure\n  let response;\n  if (Array.isArray(aiData) && aiData[0] && aiData[0].choices) {\n    // HTTP Request format (new)\n    response = aiData[0].choices[0].message.content;\n  } else if (aiData && aiData.message && aiData.message.content) {\n    // n8n OpenAI node format (old)\n    response = aiData.message.content;\n  } else if (aiData && aiData.content) {\n    // Direct content\n    response = aiData.content;\n  } else {\n    // Fallback\n    response = \"I can help you with your mortgage needs.\";\n  }\n\n  // Extract data\n  const customer = processHistory.customer;\n  const broker = processHistory.broker;\n  const messageCount = processHistory.totalMessages;\n  const userMessage = customer.currentMessage ? customer.currentMessage.toLowerCase() : '';\n\n  // Initialize\n  let shouldHandoff = false;\n  let handoffReason = 'none';\n  let urgencyLevel = 'normal';\n\n  // Check for handoff keywords\n  const handoffKeywords = [\n    'ready to apply', 'apply now', 'lets proceed',\n    'speak to human', 'real person', 'human agent',\n    'sign up', 'start application', 'move forward'\n  ];\n\n  for (const keyword of handoffKeywords) {\n    if (userMessage.includes(keyword)) {\n      shouldHandoff = true;\n      handoffReason = 'Customer explicitly requested to proceed or speak with human';\n      urgencyLevel = 'high';\n      break;\n    }\n  }\n\n  // Check high-value lead at optimal handoff point\n  if (!shouldHandoff && messageCount >= 7 && customer.leadScore >= 80) {\n    shouldHandoff = true;\n    handoffReason = 'High-value lead (score: ' + customer.leadScore + ') ready for conversion after ' + messageCount + ' messages';\n    urgencyLevel = 'medium';\n  }\n\n  // Check urgent timeline\n  if (!shouldHandoff && customer.timeline === 'urgent' && messageCount >= 5) {\n    shouldHandoff = true;\n    handoffReason = 'Urgent timeline customer engaged for ' + messageCount + ' messages';\n    urgencyLevel = 'high';\n  }\n\n  // Check complex situations\n  const complexKeywords = ['divorce', 'bankruptcy', 'foreigner', 'overseas', 'complicated'];\n  for (const keyword of complexKeywords) {\n    if (userMessage.includes(keyword)) {\n      shouldHandoff = true;\n      handoffReason = 'Complex situation requiring specialist attention';\n      urgencyLevel = 'medium';\n      break;\n    }\n  }\n\n  // Check frustration\n  const frustrationKeywords = ['frustrated', 'not helpful', 'speak to someone else', 'waste time'];\n  for (const keyword of frustrationKeywords) {\n    if (userMessage.includes(keyword)) {\n      shouldHandoff = true;\n      handoffReason = 'Customer showing frustration - immediate attention needed';\n      urgencyLevel = 'urgent';\n      break;\n    }\n  }\n\n  // Add handoff message if needed\n  let finalResponse = response;\n  if (shouldHandoff) {\n    const handoffMessage = 'I can see you are ready to take the next step! Let me connect you with our senior mortgage specialist who can process your application immediately and secure these rates for you.';\n    finalResponse = response + '\\n\\n---\\n' + handoffMessage;\n  }\n\n  // Return result\n  return {\n    aiResponse: finalResponse,\n    shouldHandoff: shouldHandoff,\n    handoffReason: handoffReason,\n    urgencyLevel: urgencyLevel,\n    conversationId: customer.conversationId,\n    brokerId: broker.id,\n    brokerName: broker.name,\n    messageCount: messageCount + 1\n  };"
      },
      "id": "258eb3ac-db52-472f-8f8f-5eb727d892de",
      "name": "Check Handoff Triggers",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1152,
        304
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0473c621-b1ab-4e0a-83f2-8ab4978bbfbc",
              "leftValue": "={{ $json.body.event }}",
              "rightValue": "created",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "0c890c6f-663c-4ab0-b549-d171471efdf0",
              "leftValue": "={{ $json.body.conversation.status }}",
              "rightValue": "bot",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "588a209b-dbed-4978-b036-f3c93f5d0929",
              "leftValue": "={{ $json.body.message.message_type }}",
              "rightValue": "incoming",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "bc6210fc-7494-41a4-8772-3473797836d8",
              "leftValue": "={{ $json.body.message.sender.type }}",
              "rightValue": "contact",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1136,
        112
      ],
      "id": "5290cbb7-74eb-48a9-895c-098c39fa0184",
      "name": "If"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "32d5e761-4aeb-494c-8151-f3201edec567",
              "leftValue": "={{ $json.hasbroker }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -192,
        32
      ],
      "id": "65c894b3-8d97-4d12-8da7-63aaa90ceb52",
      "name": "If1"
    },
    {
      "parameters": {
        "jsCode": "  // Extract customer profile from conversation\n  const body = $input.first().json.body || $input.first().json;\n  const conversation = body.conversation;\n  const message = body.message;\n  const sender = message.sender; // FIX: sender is inside message object\n\n  // Get custom attributes from BOTH conversation and contact\n  const convAttributes = conversation.custom_attributes || {};\n  const contactAttributes = conversation.contact?.custom_attributes || {};\n\n  // Merge attributes - conversation attributes take priority\n  const attributes = { ...contactAttributes, ...convAttributes };\n\n  // Build customer profile\n  const customerProfile = {\n    // Identifiers\n    conversationId: conversation.id,\n    contactId: conversation.contact_id || conversation.contact?.id,\n    messageId: message.id,\n\n    // Customer Data - check multiple sources\n    name: attributes.name || conversation.contact?.name || sender?.name || 'Customer',\n    email: attributes.email || conversation.contact?.email || sender?.email,\n    phone: attributes.phone || conversation.contact?.phone_number || sender?.phone_number,\n\n    // Lead Qualification - FROM CONVERSATION ATTRIBUTES\n    leadScore: parseInt(convAttributes.lead_score || attributes.lead_score) || 50,\n    loanType: convAttributes.loan_type || attributes.loan_type || 'new_purchase',\n    propertyType: convAttributes.property_category || attributes.property_category || 'hdb',\n    monthlyIncome: parseFloat(convAttributes.monthly_income || attributes.monthly_income) || 5000,\n    propertyPrice: parseFloat(convAttributes.property_price || attributes.property_price) || 0,\n    loanAmount: parseFloat(convAttributes.loan_amount || attributes.loan_amount) || 0,\n    timeline: convAttributes.purchase_timeline || attributes.purchase_timeline || 'flexible',\n    employmentType: convAttributes.employment_type || attributes.employment_type || 'employed',\n\n    // Additional context\n    existingCommitments: parseFloat(convAttributes.existing_commitments) || 0,\n    applicantAges: convAttributes.applicant_ages || [],\n\n    // Message Context\n    currentMessage: message.content,\n    messageCount: parseInt(convAttributes.message_count || attributes.message_count) || 0,\n\n    // Broker Assignment\n    assignedBrokerName: convAttributes.ai_broker_name || attributes.ai_broker_name,\n    brokerPersona: convAttributes.broker_persona || attributes.broker_persona,\n\n    // Session tracking\n    sessionId: convAttributes.session_id || attributes.session_id\n  };\n\n  return customerProfile;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -864,
        16
      ],
      "id": "35db76c2-2fe0-458a-a5d7-705d1e50c1cc",
      "name": "Extract Customer Profile"
    },
    {
      "parameters": {
        "jsCode": " // Code node - Get Conversation History\n  const input = $input.first().json;\n  const customerProfile = $('Extract Customer Profile').first().json;\n  const conversationId =\n    input.conversationId ||\n    customerProfile?.conversationId ||\n    input.body?.conversation?.id ||\n    24; // Fallback for testing\n\n  // Check if this is a test conversation (high ID that probably doesn't exist)\n  const isTestConversation = conversationId > 90000;\n\n  if (isTestConversation) {\n    console.log(`Test conversation detected (${conversationId}), returning mock history`);\n\n    // Return mock conversation history for testing\n    return {\n      conversationId: conversationId,\n      messages: [\n        {\n          id: 1,\n          content: customerProfile.currentMessage || \"Hi, I need help with my mortgage\",\n          message_type: 0, // incoming\n          created_at: new Date().toISOString(),\n          private: false,\n          sender: {\n            type: 'contact',\n            name: customerProfile.name\n          }\n        }\n      ],\n      messageCount: 1,\n      success: true,\n      isTest: true\n    };\n  }\n\n  // For real conversations, fetch from Chatwoot\n  try {\n    const response = await this.helpers.httpRequest({\n      method: 'GET',\n      url: `https://chat.nextnest.sg/api/v1/accounts/1/conversations/${conversationId}/messages`,\n      headers: {\n        'api-access-token': '={{$env.CHATWOOT_API_TOKEN}}'\n      },\n      json: true\n    });\n\n    // Chatwoot returns messages in response.payload\n    const messages = response.payload || [];\n\n    return {\n      conversationId: conversationId,\n      messages: messages,\n      messageCount: messages.length,\n      success: true,\n      isTest: false\n    };\n  } catch (error) {\n    console.log(`Failed to fetch conversation ${conversationId}:`, error.message);\n\n    // If it fails, return a minimal message history with the current message\n    return {\n      conversationId: conversationId,\n      messages: [\n        {\n          id: 1,\n          content: customerProfile.currentMessage || \"I need help with my mortgage\",\n          message_type: 0, // incoming\n          created_at: new Date().toISOString(),\n          private: false,\n          sender: {\n            type: 'contact',\n            name: customerProfile.name\n          }\n        }\n      ],\n      messageCount: 1,\n      success: false,\n      error: error.message,\n      fallbackUsed: true\n    };\n  }"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        816,
        -128
      ],
      "id": "c0432669-ccf5-4a25-80e0-10c1296455d3",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "jsCode": "// Send Response to Chatwoot\n  const data = $input.first().json;\n  const conversationId = data.conversationId;\n  const aiResponse = data.aiResponse;\n  const shouldHandoff = data.shouldHandoff;\n\n  // Check if this is a test conversation (high ID or specific test IDs)\n  const isTestConversation = conversationId > 90000 || conversationId === 12346 || conversationId === 12347;\n\n  if (isTestConversation) {\n    console.log(`Test mode - conversation ${conversationId} - not sending to Chatwoot`);\n    return {\n      status: 'test_mode',\n      message: 'Response generated but not sent (test conversation)',\n      conversationId: conversationId,\n      response: aiResponse,\n      shouldHandoff: shouldHandoff,\n      brokerName: data.brokerName,\n      testResult: 'SUCCESS - AI response generated correctly'\n    };\n  }\n\n  // For production - send to Chatwoot\n  try {\n    const response = await this.helpers.httpRequest({\n      method: 'POST',\n      url: `https://chat.nextnest.sg/api/v1/accounts/1/conversations/${conversationId}/messages`,\n      headers: {\n        'api-access-token': '={{$env.CHATWOOT_API_TOKEN}}',\n        'Content-Type': 'application/json'\n      },\n      body: {\n        content: aiResponse,\n        message_type: 'outgoing',\n        private: false\n      },\n      json: true\n    });\n\n    // If handoff needed, update conversation status\n    if (shouldHandoff) {\n      await this.helpers.httpRequest({\n        method: 'PATCH',\n        url: `https://chat.nextnest.sg/api/v1/accounts/1/conversations/${conversationId}`,\n        headers: {\n          'api-access-token': '={{$env.CHATWOOT_API_TOKEN}}',\n          'Content-Type': 'application/json'\n        },\n        body: {\n          status: 'pending'\n        },\n        json: true\n      });\n    }\n\n    return {\n      status: 'success',\n      messageId: response.id,\n      conversationId: conversationId,\n      response: aiResponse,\n      shouldHandoff: shouldHandoff,\n      handoffStatus: shouldHandoff ? 'pending' : 'bot',\n      brokerName: data.brokerName\n    };\n\n  } catch (error) {\n    // For test conversations, treat 404 as success\n    if (error.message.includes('404') && conversationId > 1000) {\n      console.log(`Conversation ${conversationId} doesn't exist in Chatwoot (expected for test)`);\n      return {\n        status: 'test_success',\n        message: 'Test conversation - response generated successfully',\n        conversationId: conversationId,\n        response: aiResponse,\n        shouldHandoff: shouldHandoff,\n        brokerName: data.brokerName,\n        error: 'Conversation not in Chatwoot (expected for test IDs)'\n      };\n    }\n\n    return {\n      status: 'error',\n      error: error.message,\n      conversationId: conversationId,\n      response: aiResponse,\n      shouldHandoff: shouldHandoff\n    };\n  }"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1440,
        240
      ],
      "id": "ca148e05-8387-4aff-9ae2-5e10a0f871a1",
      "name": "Code in JavaScript1"
    },
    {
      "parameters": {
        "jsCode": "// Handle Handoff to Human Agent\n  let data = $input.first().json;\n\n  // If data is incomplete (coming through IF node), get from Check Handoff Triggers\n  if (!data.handoffReason || data.messageCount === undefined) {\n    try {\n      // Get the full data from Check Handoff Triggers node\n      const checkHandoffData = $('Check Handoff Triggers').first().json;\n      data = checkHandoffData;\n      console.log('Got complete data from Check Handoff Triggers');\n    } catch (e) {\n      console.log('Could not get data from Check Handoff Triggers:', e.message);\n    }\n  }\n\n  // Now extract all values\n  const conversationId = data.conversationId;\n  const brokerName = data.brokerName;\n  const handoffReason = data.handoffReason || 'Customer ready to proceed';\n  const urgencyLevel = data.urgencyLevel || 'normal';\n  const messageCount = data.messageCount || 0;\n  const brokerId = data.brokerId;\n\n  // Debug: Log extracted values\n  console.log('Final extracted values:', {\n    conversationId,\n    brokerName,\n    handoffReason,\n    urgencyLevel,\n    messageCount,\n    brokerId\n  });\n\n  // Get customer data from the input chain\n  let customerProfile = {};\n  try {\n    // Try to get from previous nodes in the chain\n    const inputs = $input.all();\n    for (const input of inputs) {\n      if (input.json.leadScore !== undefined) {\n        customerProfile = input.json;\n        break;\n      }\n    }\n  } catch (e) {\n    // Use defaults if not found\n    customerProfile = {\n      leadScore: 0,\n      loanType: 'unknown',\n      propertyType: 'unknown',\n      monthlyIncome: 0,\n      timeline: 'unknown',\n      currentMessage: ''\n    };\n  }\n\n// For test mode or high conversation IDs, just return what would be done\n  if (conversationId > 90000 || conversationId === 12346 || conversationId === 12347) {\n    return {\n      status: 'test_mode',\n      message: 'Handoff simulated (test conversation)',\n      conversationId: conversationId,\n      actions: ['Would change status to open', 'Would add internal note'],\n      handoffDetails: {\n        broker: brokerName,\n        reason: handoffReason,\n        urgency: urgencyLevel,\n        messages: messageCount\n      },\n      customerSummary: {\n        leadScore: customerProfile.leadScore,\n        loanType: customerProfile.loanType,\n        propertyType: customerProfile.propertyType,\n        monthlyIncome: customerProfile.monthlyIncome\n      }\n    };\n  }\n\n\n  try {\n    // Step 1: Change conversation status to \"open\" for human agents\n    const statusUpdate = await this.helpers.httpRequest({\n      method: 'PATCH',\n      url: `https://chat.nextnest.sg/api/v1/accounts/1/conversations/${conversationId}`,\n      headers: {\n        'api-access-token': '={{$env.CHATWOOT_API_TOKEN}}',\n        'Content-Type': 'application/json'\n      },\n      body: {\n        status: 'open'\n      },\n      json: true\n    });\n\n    // Step 2: Add internal note with handoff details\n    const noteContent = '🤖➡️👨‍💼 **AI Broker Handoff**\\n\\n' +\n      '**From:** ' + brokerName + '\\n' +\n      '**Reason:** ' + handoffReason + '\\n' +\n      '**Urgency:** ' + urgencyLevel + '\\n' +\n      '**Messages Exchanged:** ' + messageCount + '\\n\\n' +\n      '**Quick Summary:**\\n' +\n      '- Lead Score: ' + (customerProfile.leadScore || 'N/A') + '/100\\n' +\n      '- Loan Type: ' + (customerProfile.loanType || 'N/A') + '\\n' +\n      '- Property: ' + (customerProfile.propertyType || 'N/A') + '\\n' +\n      '- Income: S$' + (customerProfile.monthlyIncome || 'N/A') + '\\n' +  // Fixed: Added $\n      '- Timeline: ' + (customerProfile.timeline || 'N/A');\n\n    const internalNote = await this.helpers.httpRequest({\n      method: 'POST',\n      url: `https://chat.nextnest.sg/api/v1/accounts/1/conversations/${conversationId}/messages`,\n      headers: {\n        'api-access-token': '={{$env.CHATWOOT_API_TOKEN}}',\n        'Content-Type': 'application/json'\n      },\n      body: {\n        content: noteContent,\n        message_type: 'outgoing',\n        private: true\n      },\n      json: true\n    });\n\n    return {\n      status: 'success',\n      message: 'Handoff completed',\n      conversationId: conversationId,\n      conversationStatus: 'open',\n      handoffDetails: {\n        broker: brokerName,\n        reason: handoffReason,\n        urgency: urgencyLevel,\n        messages: messageCount\n      }\n    };\n\n  } catch (error) {\n    return {\n      status: 'error',\n      error: error.message,\n      conversationId: conversationId\n    };\n  }"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1824,
        80
      ],
      "id": "66ef81c3-320b-4242-a7c7-6b320f175816",
      "name": "Code in JavaScript2"
    },
    {
      "parameters": {
        "jsCode": "// Update Conversation Attributes (No Handoff)\n  const handoffData = $input.first().json;\n  const checkHandoff = $('Check Handoff Triggers').first().json;\n\n  // Get all the data we need\n  const conversationId = handoffData.conversationId || checkHandoff.conversationId;\n  const messageCount = handoffData.messageCount || checkHandoff.messageCount || 0;\n  const brokerId = handoffData.brokerId || checkHandoff.brokerId || '';\n  const brokerName = handoffData.brokerName || checkHandoff.brokerName || '';\n  const handoffReason = handoffData.handoffReason || checkHandoff.handoffReason || 'none';\n\n  // For test mode, just return what would be updated\n  if (conversationId === 12346 || conversationId === 12347) {\n    return {\n      status: 'test_mode',\n      message: 'Attributes update simulated (test conversation)',\n      conversationId: conversationId,\n      updatedAttributes: {\n        message_count: messageCount,\n        assigned_broker_id: brokerId,\n        assigned_broker_name: brokerName,\n        last_ai_response: new Date().toISOString(),\n        handoff_triggered: false,\n        handoff_reason: handoffReason\n      }\n    };\n  }\n\n  try {\n    // Update conversation custom attributes\n    const response = await this.helpers.httpRequest({\n      method: 'PATCH',\n      url: `https://chat.nextnest.sg/api/v1/accounts/1/conversations/${conversationId}`,\n      headers: {\n        'api-access-token': '={{$env.CHATWOOT_API_TOKEN}}',\n        'Content-Type': 'application/json'\n      },\n      body: {\n        custom_attributes: {\n          message_count: messageCount,\n          assigned_broker_id: brokerId,\n          assigned_broker_name: brokerName,\n          last_ai_response: new Date().toISOString(),\n          handoff_triggered: false,\n          handoff_reason: handoffReason,\n          broker_status: 'active'\n        }\n      },\n      json: true\n    });\n\n    // Also update broker_conversations table in database\n    try {\n      await this.helpers.httpRequest({\n        method: 'POST',\n        url: 'https://primary-production-1af6.up.railway.app/rest/execute',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: {\n          query: `UPDATE broker_conversations\n                  SET messages_exchanged = $1,\n                      broker_messages = broker_messages + 1,\n                      last_message_at = NOW(),\n                      status = 'active'\n                  WHERE conversation_id = $2`,\n          params: [messageCount, conversationId]\n        },\n        json: true\n      });\n    } catch (dbError) {\n      console.log('Database update failed:', dbError.message);\n    }\n\n    return {\n      status: 'success',\n      message: 'Conversation attributes updated',\n      conversationId: conversationId,\n      updatedAttributes: {\n        message_count: messageCount,\n        assigned_broker_id: brokerId,\n        assigned_broker_name: brokerName,\n        last_ai_response: new Date().toISOString(),\n        handoff_triggered: false,\n        handoff_reason: handoffReason\n      }\n    };\n\n  } catch (error) {\n    return {\n      status: 'error',\n      error: error.message,\n      conversationId: conversationId\n    };\n  }"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1824,
        304
      ],
      "id": "ecc48d7d-9d6a-47e6-901e-66d6ca42621d",
      "name": "Code in JavaScript3"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "832ebe33-808c-4522-a0f0-635911b90cc4",
              "leftValue": "={{ $json.shouldHandoff }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1632,
        192
      ],
      "id": "9e568f35-82ae-4739-afbd-556828376fcf",
      "name": "If2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "= {{ $('Set Supabase Config').item.json.SUPABASE_URL }}/rest/v1/rpc/check_broker_assignment",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Set Supabase Config').item.json.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Prefer",
              "value": "return=representation "
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "= {\n    \"conversation_id_param\": {{ $('Extract Customer Profile').item.json.conversationId || 0 }}\n  }",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -400,
        32
      ],
      "id": "6d5100b8-732d-48d7-be24-460d701c4c75",
      "name": "Check Broker Assignment"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f6bc60ca-86cf-4c14-8a68-843d1312b7a7",
              "name": "SUPABASE_URL",
              "value": "https://xlncuntbqajqfkegmuvo.supabase.co",
              "type": "string"
            },
            {
              "id": "858b626d-6d8b-4c32-aa23-bf51a063dc52",
              "name": "SUPABASE_ANON_KEY",
              "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhsbmN1bnRicWFqcWZrZWdtdXZvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc1NTM2ODMsImV4cCI6MjA3MzEyOTY4M30.bHiwII2RVw48sJGNl-30pJnXe82zDDbR5gMqdl3WWT8",
              "type": "string"
            },
            {
              "id": "b29e685f-4f91-44bc-94c8-b7c3b32f0bce",
              "name": "OPENAI_API_KEY",
              "value": "=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",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -624,
        32
      ],
      "id": "a78dd44e-2731-4949-bb37-10b1ad10c63b",
      "name": "Set Supabase Config"
    },
    {
      "parameters": {
        "url": "={{ $('Set Supabase Config').item.json.SUPABASE_URL }}/rest/v1/ai_brokers?id=eq.{{ $json.broker_id }}&select=*",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Set Supabase Config').item.json.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json "
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        112,
        400
      ],
      "id": "e3857592-19ac-4659-b2b8-60c54fb7250f",
      "name": "Get Broker Details"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Set Supabase Config').item.json.SUPABASE_URL }}/rest/v1/rpc/get_assigned_broker",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Set Supabase Config').item.json.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json "
            },
            {
              "name": "Prefer",
              "value": "return=representation "
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "=  {\n    \"p_lead_score\": {{ $('Extract Customer Profile').item.json.leadScore }},\n    \"p_loan_type\": \"{{ $('Extract Customer Profile').item.json.loanType }}\",\n    \"p_property_type\": \"{{ $('Extract Customer Profile').item.json.propertyType }}\",\n    \"p_monthly_income\": {{ $('Extract Customer Profile').item.json.monthlyIncome }},\n    \"p_timeline\": \"{{ $('Extract Customer Profile').item.json.timeline }}\"\n  }",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -16,
        32
      ],
      "id": "185110d0-6bda-4b4f-a755-38b3dba22677",
      "name": "Assign Best Broker"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Set Supabase Config').item.json.SUPABASE_URL }}/rest/v1/broker_conversations",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Set Supabase Config').item.json.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json "
            },
            {
              "name": "Prefer",
              "value": "return=representation "
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "= {\n    \"conversation_id\": {{ $('Extract Customer Profile').item.json.conversationId }},\n    \"broker_id\": \"{{ $json.id }}\",\n    \"contact_id\": {{ $('Extract Customer Profile').item.json.contactId }},\n    \"customer_name\": \"{{ $('Extract Customer Profile').item.json.name }}\",\n    \"customer_email\": \"{{ $('Extract Customer Profile').item.json.email }}\",\n    \"customer_phone\": \"{{ $('Extract Customer Profile').item.json.phone }}\",\n    \"lead_score\": {{ $('Extract Customer Profile').item.json.leadScore }},\n    \"loan_type\": \"{{ $('Extract Customer Profile').item.json.loanType }}\",\n    \"property_type\": \"{{ $('Extract Customer Profile').item.json.propertyType }}\",\n    \"monthly_income\": {{ $('Extract Customer Profile').item.json.monthlyIncome }},\n    \"loan_amount\": {{ $('Extract Customer Profile').item.json.loanAmount || 0 }},\n    \"timeline\": \"{{ $('Extract Customer Profile').item.json.timeline }}\",\n    \"assignment_method\": \"auto\",\n    \"assignment_reason\": \"Best match based on lead score and profile\",\n    \"status\": \"active\",\n    \"assigned_at\": \"{{ new Date().toISOString() }}\"\n  }",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        176,
        48
      ],
      "id": "73890dd3-c64b-4f03-96a1-79dbb3adaa23",
      "name": "Create Assignment Record"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Set Supabase Config').item.json.SUPABASE_URL }}/rest/v1/rpc/update_metrics_after_response",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Set Supabase Config').item.json.SUPABASE_ANON_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json "
            },
            {
              "name": "Prefer",
              "value": "return=representation "
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "= {\n    \"p_conversation_id\": {{ $('Check Handoff Triggers').first().json.conversationId }},\n    \"p_broker_id\": \"{{ $('Check Handoff Triggers').first().json.brokerId }}\",\n    \"p_message_count\": {{ $('Check Handoff Triggers').first().json.messageCount }},\n    \"p_handoff_triggered\": {{ $('Check Handoff Triggers').first().json.shouldHandoff }},\n    \"p_handoff_reason\": \"{{ $('Check Handoff Triggers').first().json.handoffReason }}\"\n  }\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2176,
        128
      ],
      "id": "34927cf8-5b56-4bcc-8184-6a986890cb39",
      "name": "Update Metrics"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Set Supabase Config').item.json.OPENAI_API_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        912,
        384
      ],
      "id": "6dd5a1d1-8516-42aa-8aaa-74ec360b3d81",
      "name": "Openai"
    },
    {
      "parameters": {
        "jsCode": "const processHistory = $input.first().json;\n\n  const systemPrompt = `You are ${processHistory.broker.name}, a mortgage specialist in Singapore with this personality:\n  ${processHistory.broker.voiceDescription}\n\n  Your communication style: ${processHistory.broker.communicationStyle}\n  Your approach: ${processHistory.broker.approachStyle}\n\n  Use these phrases naturally: ${processHistory.broker.favoritePhrases.join(', ')}\n\n  Customer Profile:\n  - Name: ${processHistory.customer.name}\n  - Lead Score: ${processHistory.customer.leadScore}\n  - Loan Type: ${processHistory.customer.loanType}\n  - Property: ${processHistory.customer.propertyType}\n  - Monthly Income: $${processHistory.customer.monthlyIncome}\n  - Loan Amount: $${processHistory.customer.loanAmount}\n\n  Stay in character. Be helpful but push for conversion. If they show interest, suggest scheduling a call or getting pre-approval.`;\n\n  return {\n    model: \"gpt-4o-mini\",\n    messages: [\n      {\n        role: \"system\",\n        content: systemPrompt\n      },\n      {\n        role: \"user\",\n        content: processHistory.currentMessage\n      }\n    ],\n    max_tokens: 500,\n    temperature: 0.8\n  };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        272
      ],
      "id": "1484a43d-4ff4-4c38-ae47-5406f77296db",
      "name": "Prepare OpenAI Request"
    }
  ],
  "pinData": {},
  "connections": {
    "Chatwoot Webhook": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Broker Context": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process History": {
      "main": [
        [
          {
            "node": "Prepare OpenAI Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Handoff Triggers": {
      "main": [
        [
          {
            "node": "Code in JavaScript1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Extract Customer Profile",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Assign Best Broker",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Broker Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Customer Profile": {
      "main": [
        [
          {
            "node": "Set Supabase Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Process History",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript1": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Code in JavaScript2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code in JavaScript3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript2": {
      "main": [
        [
          {
            "node": "Update Metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript3": {
      "main": [
        [
          {
            "node": "Update Metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Supabase Config": {
      "main": [
        [
          {
            "node": "Check Broker Assignment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Broker Assignment": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Assign Best Broker": {
      "main": [
        [
          {
            "node": "Create Assignment Record",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Broker Details": {
      "main": [
        [
          {
            "node": "Merge Broker Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Assignment Record": {
      "main": [
        [
          {
            "node": "Merge Broker Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Openai": {
      "main": [
        [
          {
            "node": "Check Handoff Triggers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare OpenAI Request": {
      "main": [
        [
          {
            "node": "Openai",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "09212f2d-9e6a-4ec5-88d6-8d1d1deef1d0",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "6964f6cc593d151740b2cfaf9853d942d8baa05ae80134871d80f052f81f912b"
  },
  "id": "I6fx7kySryKCu4zi",
  "tags": []
}